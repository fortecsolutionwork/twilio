{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","connecting","onSubmit","htmlFor","type","id","value","onChange","readOnly","required","disabled","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","className","identity","ref","autoPlay","muted","Room","room","handleLogout","participants","setParticipants","participantConnected","prevParticipants","participantDisconnected","p","forEach","off","remoteParticipants","sid","onClick","localParticipant","VideoChat","setUsername","setRoomName","setRoom","setConnecting","useCallback","event","target","preventDefault","fetch","method","body","JSON","stringify","headers","then","res","json","data","Video","connect","token","name","catch","err","console","error","prevRoom","tracks","trackPub","stop","disconnect","tidyUp","persisted","window","addEventListener","removeEventListener","App","role","aria-label","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OA4CeA,EA1CD,SAAC,GAOR,IANLC,EAMI,EANJA,SACAC,EAKI,EALJA,qBACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,qBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,WAEA,OACE,uBAAMC,SAAUF,EAAhB,UACE,8CACA,gCACE,uBAAOG,QAAQ,OAAf,mBACA,uBACEC,KAAK,OACLC,GAAG,QACHC,MAAOV,EACPW,SAAUV,EACVW,SAAUP,EACVQ,UAAQ,OAIZ,gCACE,uBAAON,QAAQ,OAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,MAAOR,EACPS,SAAUR,EACVS,SAAUP,EACVQ,UAAQ,OAIZ,wBAAQL,KAAK,SAASM,SAAUT,EAAhC,SACGA,EAAa,aAAe,a,QCmCtBU,EAvEK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACDC,mBAAS,IADR,mBAChCC,EADgC,KACnBC,EADmB,OAEDF,mBAAS,IAFR,mBAEhCG,EAFgC,KAEnBC,EAFmB,KAIjCC,EAAWC,mBACXC,EAAWD,mBAEXE,EAAoB,SAACC,GAAD,OACxBC,MAAMC,KAAKF,EAASG,UACjBC,KAAI,SAACC,GAAD,OAAiBA,EAAYC,SACjCC,QAAO,SAACD,GAAD,OAAqB,OAAVA,MAoDvB,OAlDAE,qBAAU,WACRf,EAAeM,EAAkBT,EAAYE,cAC7CG,EAAeI,EAAkBT,EAAYI,cAqB7C,OAHAJ,EAAYmB,GAAG,mBAhBS,SAACH,GACJ,UAAfA,EAAMI,KACRjB,GAAe,SAACD,GAAD,4BAAqBA,GAArB,CAAkCc,OACzB,UAAfA,EAAMI,MACff,GAAe,SAACD,GAAD,4BAAqBA,GAArB,CAAkCY,UAarDhB,EAAYmB,GAAG,qBATW,SAACH,GACN,UAAfA,EAAMI,KACRjB,GAAe,SAACD,GAAD,OAAiBA,EAAYe,QAAO,SAACI,GAAD,OAAOA,IAAML,QACxC,UAAfA,EAAMI,MACff,GAAe,SAACD,GAAD,OAAiBA,EAAYa,QAAO,SAACK,GAAD,OAAOA,IAAMN,WAO7D,WACLb,EAAe,IACfE,EAAe,IACfL,EAAYuB,wBAEb,CAACvB,IAEJkB,qBAAU,WACR,IAAMM,EAAatB,EAAY,GAC/B,GAAIsB,EAEF,OADAA,EAAWC,OAAOnB,EAASoB,SACpB,WACLF,EAAWG,YAGd,CAACzB,IAEJgB,qBAAU,WACR,IAAMU,EAAaxB,EAAY,GAC/B,GAAIwB,EAEF,OADAA,EAAWH,OAAOjB,EAASkB,SACpB,WACLE,EAAWD,YAGd,CAACvB,IAGF,sBAAKyB,UAAU,cAAf,UACE,6BAAK7B,EAAY8B,WACjB,uBAAOC,IAAKzB,EAAU0B,UAAU,IAChC,uBAAOD,IAAKvB,EAAUwB,UAAU,EAAMC,OAAO,QClBpCC,EA/CF,SAAC,GAAsC,IAApChD,EAAmC,EAAnCA,SAAUiD,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAAmB,EACTnC,mBAAS,IADA,mBAC1CoC,EAD0C,KAC5BC,EAD4B,KAGjDpB,qBAAU,WACR,IAAMqB,EAAuB,SAACvC,GAC5BsC,GAAgB,SAACE,GAAD,4BAA0BA,GAA1B,CAA4CxC,QAGxDyC,EAA0B,SAACzC,GAC/BsC,GAAgB,SAACE,GAAD,OACdA,EAAiBvB,QAAO,SAACyB,GAAD,OAAOA,IAAM1C,SAOzC,OAHAmC,EAAKhB,GAAG,uBAAwBoB,GAChCJ,EAAKhB,GAAG,0BAA2BsB,GACnCN,EAAKE,aAAaM,QAAQJ,GACnB,WACLJ,EAAKS,IAAI,uBAAwBL,GACjCJ,EAAKS,IAAI,0BAA2BH,MAErC,CAACN,IAEJ,IAAMU,EAAqBR,EAAavB,KAAI,SAACd,GAAD,OAC1C,cAAC,EAAD,CAAmCA,YAAaA,GAA9BA,EAAY8C,QAGhC,OACE,sBAAKjB,UAAU,OAAf,UACE,wCAAW3C,KACX,wBAAQ6D,QAASX,EAAjB,qBACA,qBAAKP,UAAU,oBAAf,SACGM,EACC,cAAC,EAAD,CAEEnC,YAAamC,EAAKa,kBADbb,EAAKa,iBAAiBF,KAI7B,KAGJ,qDACA,qBAAKjB,UAAU,sBAAf,SAAsCgB,QCsD7BI,EA9FG,WAAO,IAAD,EACUhD,mBAAS,IADnB,mBACfjB,EADe,KACLkE,EADK,OAEUjD,mBAAS,IAFnB,mBAEff,EAFe,KAELiE,EAFK,OAGElD,mBAAS,MAHX,mBAGfkC,EAHe,KAGTiB,EAHS,OAIcnD,oBAAS,GAJvB,mBAIfZ,EAJe,KAIHgE,EAJG,KAMhBpE,EAAuBqE,uBAAY,SAACC,GACxCL,EAAYK,EAAMC,OAAO9D,SACxB,IAEGP,EAAuBmE,uBAAY,SAACC,GACxCJ,EAAYI,EAAMC,OAAO9D,SACxB,IAEGN,EAAekE,sBAAW,uCAC9B,WAAOC,GAAP,eAAAjC,EAAA,6DACEiC,EAAME,iBACNJ,GAAc,GAFhB,SAGqBK,MAAM,eAAgB,CACvCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBhC,SAAU9C,EACVmD,KAAMjD,IAER6E,QAAS,CACP,eAAgB,sBAEjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAZvB,OAGQC,EAHR,OAaEC,IAAMC,QAAQF,EAAKG,MAAO,CACxBC,KAAMrF,IAEL8E,MAAK,SAAC7B,GACLkB,GAAc,GACdD,EAAQjB,MAETqC,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdpB,GAAc,MAtBpB,2CAD8B,sDA0B9B,CAACnE,EAAUF,IAGPoD,EAAekB,uBAAY,WAC/BF,GAAQ,SAACwB,GAOP,OANIA,IACFA,EAAS5B,iBAAiB6B,OAAOlC,SAAQ,SAACmC,GACxCA,EAAS9D,MAAM+D,UAEjBH,EAASI,cAEJ,UAER,IAsCH,OApCA9D,qBAAU,WACR,GAAIiB,EAAM,CACR,IAAM8C,EAAS,SAAC1B,GACVA,EAAM2B,WAGN/C,GACFC,KAKJ,OAFA+C,OAAOC,iBAAiB,WAAYH,GACpCE,OAAOC,iBAAiB,eAAgBH,GACjC,WACLE,OAAOE,oBAAoB,WAAYJ,GACvCE,OAAOE,oBAAoB,eAAgBJ,OAG9C,CAAC9C,EAAMC,IAGND,EAEA,cAAC,EAAD,CAAMjD,SAAUA,EAAUiD,KAAMA,EAAMC,aAAcA,IAIpD,cAAC,EAAD,CACEpD,SAAUA,EACVE,SAAUA,EACVD,qBAAsBA,EACtBE,qBAAsBA,EACtBC,aAAcA,EACdC,WAAYA,KClELiG,EAtBH,WACV,OACE,sBAAKzD,UAAU,MAAf,UACE,iCACE,0DAEF,+BACE,cAAC,EAAD,MAEF,iCACE,0CACY,IACV,sBAAM0D,KAAK,MAAMC,aAAW,QAA5B,0BAEQ,IAJV,MAKK,mBAAGC,KAAK,+BAAR,+BCTOC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.5b2b9baf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit,\n  connecting,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Enter a room</h2>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"field\"\n          value={username}\n          onChange={handleUsernameChange}\n          readOnly={connecting}\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"room\">Room name:</label>\n        <input\n          type=\"text\"\n          id=\"room\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          readOnly={connecting}\n          required\n        />\n      </div>\n\n      <button type=\"submit\" disabled={connecting}>\n        {connecting ? \"Connecting\" : \"Join\"}\n      </button>\n    </form>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = (trackMap) =>\n    Array.from(trackMap.values())\n      .map((publication) => publication.track)\n      .filter((track) => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n    const trackSubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\n      }\n    };\n\n    participant.on(\"trackSubscribed\", trackSubscribed);\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} muted={true} />\n    </div>\n  );\n};\n\nexport default Participant;\n","import React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\n\nconst Room = ({ roomName, room, handleLogout }) => {\n  const [participants, setParticipants] = useState([]);\n\n  useEffect(() => {\n    const participantConnected = (participant) => {\n      setParticipants((prevParticipants) => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = (participant) => {\n      setParticipants((prevParticipants) =>\n        prevParticipants.filter((p) => p !== participant)\n      );\n    };\n\n    room.on(\"participantConnected\", participantConnected);\n    room.on(\"participantDisconnected\", participantDisconnected);\n    room.participants.forEach(participantConnected);\n    return () => {\n      room.off(\"participantConnected\", participantConnected);\n      room.off(\"participantDisconnected\", participantDisconnected);\n    };\n  }, [room]);\n\n  const remoteParticipants = participants.map((participant) => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n\n  return (\n    <div className=\"room\">\n      <h2>Room: {roomName}</h2>\n      <button onClick={handleLogout}>Log out</button>\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n      <h3>Remote Participants</h3>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n    </div>\n  );\n};\n\nexport default Room;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [room, setRoom] = useState(null);\n  const [connecting, setConnecting] = useState(false);\n\n  const handleUsernameChange = useCallback((event) => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback((event) => {\n    setRoomName(event.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (event) => {\n      event.preventDefault();\n      setConnecting(true);\n      const data = await fetch(\"/video/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          identity: username,\n          room: roomName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => res.json());\n      Video.connect(data.token, {\n        name: roomName,\n      })\n        .then((room) => {\n          setConnecting(false);\n          setRoom(room);\n        })\n        .catch((err) => {\n          console.error(err);\n          setConnecting(false);\n        });\n    },\n    [roomName, username]\n  );\n\n  const handleLogout = useCallback(() => {\n    setRoom((prevRoom) => {\n      if (prevRoom) {\n        prevRoom.localParticipant.tracks.forEach((trackPub) => {\n          trackPub.track.stop();\n        });\n        prevRoom.disconnect();\n      }\n      return null;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (room) {\n      const tidyUp = (event) => {\n        if (event.persisted) {\n          return;\n        }\n        if (room) {\n          handleLogout();\n        }\n      };\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return () => {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n\n  let render;\n  if (room) {\n    render = (\n      <Room roomName={roomName} room={room} handleLogout={handleLogout} />\n    );\n  } else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n        connecting={connecting}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Video Chat  with Hooks</h1>\n      </header>\n      <main>\n        <VideoChat />\n      </main>\n      <footer>\n        <p>\n          Made with{' '}\n          <span role=\"img\" aria-label=\"React\">\n            ⚛️\n          </span>{' '}\n          by <a href=\"https://twitter.com/philnash\">philnash</a>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}